plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=homerange, aes_string(x=input$x, fill=input$fill))+
geom_bar(position = "dodge")+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable"),
selectInput("fill", "Select fill Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
ui <- fluidPage(
selectInput("fill", "Select fill Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=homerange, aes(x=locomotion, fill=input$fill))+
geom_bar(position = "dodge")+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation"), selected="trophic.guild"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
homerange %>%
filter(taxon=="mammals") %>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha=0.6)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
selectInput("x", "Select Taxon",
choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoise", "turtules") selected = "birds"),
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
selectInput("x", "Select Taxon",
choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles") selected = "birds"),
homerange$taxon
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 0.5, max = 3, value = 1, step = 0.5),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize) +
theme_light()
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
selectInput("x", "Select Taxon",
choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles") selected = "birds"),
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
selectInput("x", "Select Taxon", choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles") selected = "birds"),
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
selectInput("x", "Select Taxon", choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected = "birds"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon == input$x) %>%
ggplot(aes(x = log10.hra)) +
geom_density(fill = "steelblue", color = "black", alpha = 0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
selectInput("x", "Select Taxon", choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected = "birds"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon==input$x) %>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(width = 9,
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_depth_mm"),
), # close the first box
box(title = "Plot of Penguins Data", width = 9,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Population", choices = unique(wolves$pop)), hr()
),
box(title = "Plot of Wolves Data", width = 7,
plotOutput("plot", width = "800px", height = "600px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Population", choices = unique(wolves$pop)), hr()
),
box(title = "Plot of Wolves Data", width = 7,
plotOutput("plot", width = "600px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Population", choices = unique(wolves$pop)), hr()
),
box(title = "Plot of Wolves Data", width = 7,
plotOutput("plot", width = "600px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=input$x, fill=sex))+
geom_bar()+
})
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Population", choices = unique(wolves$pop)), hr()
),
box(title = "Plot of Wolves Data", width = 7,
plotOutput("plot", width = "600px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop=input$x)
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
})
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Population", choices = unique(wolves$pop)), hr()
),
box(title = "Plot of Wolves Data", width = 7,
plotOutput("plot", width = "600px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop=input$x) %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
})
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Population", choices = unique(wolves$pop)), hr()
),
box(title = "Plot of Wolves Data", width = 7,
plotOutput("plot", width = "600px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop==input$x) %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
})
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Population", choices = unique(wolves$pop)), hr()
),
box(title = "Plot of Wolves Data", width = 7,
plotOutput("plot", width = "600px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop==input$x) %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
})
ui <- dashboardPage(
dashboardHeader(title = "Sex Composition by Wolves"),
dashboardSidebar(disable=T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Population", choices = unique(wolves$pop)), hr()
),
box(title = "Plot of Wolves Data", width = 7,
plotOutput("plot", width = "600px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop==input$x) %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
selectInput("x", "Select Taxon", choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected = "birds"),
plotOutput("plot", width = "600px", height = "500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon==input$x) %>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(tittle="Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("color", "Select color Variable", choices = c("species"),
selected = "bill_length_mm"),
plotOutput("plot", width="500px", height="400px")
)
)
)
ui <- dashboardPage(
dashboardHeader(tittle="Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("color", "Select color Variable", choices = c("species"),
selected = "bill_length_mm"),
plotOutput("plot", width="500px", height="400px")
)
)
)
ui <- dashboardPage(
dashboardHeader(tittle="Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("color", "Select color Variable", choices = c("species"),
selected = "bill_length_mm"),
plotOutput("plot", width="500px", height="400px")
)
)
)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("color", "Select color Variable", choices = c("species"),
selected = "bill_length_mm"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x=input$x, y=input$y, color=input$color))+
geom_point()+
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = TRUE),
dashboardBody(
fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("color", "Select Color Variable", choices = c("species"),
selected = "species"),
plotOutput("plot", width = "500px", height = "400px")
)
)
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = penguins, aes_string(x = input$x, y = input$y, color = input$color)) +
geom_point() +
theme_light(base_size = 18)
})
}
shinyApp(ui, server)
